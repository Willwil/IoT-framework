#!/usr/bin/python3

# Python GPIO to DBUS Gateway

import time
import dbus.service
import threading
import select
import os
import yaml
import sys
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GObject

DBUS_SERVICE_INTERFACE = "com.devicehive.gpio.GpioService"
DBUS_PIN_INTERFACE = "com.devicehive.gpio.GpioPin"
OBJECT_MANAGER_INTERFACE = "org.freedesktop.DBus.ObjectManager"

DBUS_PATH = "/com/devicehive/gpio"

class EventHook(object):
    def __init__(self):
        self.__handlers = []

    def __iadd__(self, handler):
        self.__handlers.append(handler)
        return self

    def __isub__(self, handler):
        self.__handlers.remove(handler)
        return self

    def fire(self, *args, **keywargs):
        for handler in self.__handlers:
            handler(*args, **keywargs)

class GPIOPin(dbus.service.Object):
    def __init__(self, bus_name, pin, port):
        self.m_service_path = "{}/{}".format(DBUS_PATH, pin)
        self.m_port = port
        self.m_poll_thread = None
        self.m_poll_flag = False
        self.m_pin = pin
        self.m_gpio_port_path = "/sys/class/gpio/gpio{}".format(self.m_port)
        self.m_gpio_port_path_value = os.path.join(self.m_gpio_port_path, "value")
        self.onPinChange = EventHook()
        dbus.service.Object.__init__(self, bus_name, self.m_service_path)

    # send when pin state changed
    @dbus.service.signal(DBUS_PIN_INTERFACE, signature="sv")
    def pin_value_changed(self, pin, value):
        self.onPinChange(port, value)
        pass

    # pin state poller
    def poller(self):
        watcher = open(self.m_gpio_port_path_value, "r")
        poller = select.poll()
        poller.register(watcher, select.POLLPRI or select.POLLERR or select.POLLIN)
        try:
            laststate = watcher.read(1)
        except OSError:
            poller.unregister(watcher)
            return
        while self.m_poll_flag:
            # TODO remove wait cycle and exit with deinit and re-init
            pollresult = poller.poll(1000)
            if not pollresult:
                continue
            try:
                watcher.seek(0)
                state = watcher.read(1)
            except OSError:
                break
            if state == "1" or state == "0":
                if state != laststate:
                    laststate = state
                    self.pin_value_changed(self.m_pin, state)
        poller.unregister(watcher)
        watcher.close()

    # init pin
    @dbus.service.method(DBUS_PIN_INTERFACE, in_signature="s")
    def init(self, mode):
        # mode can be out, in, rising, falling or both
        if os.path.isdir(self.m_gpio_port_path):
            self.deinit()
        with open("/sys/class/gpio/export", 'w') as fi:
            fi.write(self.m_port)
        if mode == "out":
            with open(os.path.join(self.m_gpio_port_path, "direction"), "w") as fi:
                fi.write("out")
        else:
            with open(os.path.join(self.m_gpio_port_path, "direction"), "w") as fi:
                fi.write("in")
            if mode != "in":
                with open(os.path.join(self.m_gpio_port_path, "edge"), "w") as fi:
                    fi.write(mode)
                self.m_poll_flag = True
                self.m_poll_thread = threading.Thread(target=self.poller)
                self.m_poll_thread.start()
            else:
                with open(os.path.join(self.m_gpio_port_path, "edge"), "w") as fi:
                    fi.write("none")

    # deinit pin and free all resource
    @dbus.service.method(DBUS_PIN_INTERFACE)
    def deinit(self):
        with open("/sys/class/gpio/unexport", 'w') as fi:
            fi.write(self.m_port)
        if self.m_poll_flag:
            self.m_poll_flag = False
            self.m_poll_thread.join()

    # set pin state
    @dbus.service.method(DBUS_PIN_INTERFACE, in_signature="s")
    def set_value(self, value):
        if value == "1":
            with open(self.m_gpio_port_path_value, "w") as fi:
                fi.write("1")
        else:
            with open(self.m_gpio_port_path_value, "w") as fi:
                fi.write("0")

    # set pin state to high
    @dbus.service.method(DBUS_PIN_INTERFACE)
    def set(self):
        with open(self.m_gpio_port_path_value, "w") as fi:
            fi.write("1")

    # set pin state to low
    @dbus.service.method(DBUS_PIN_INTERFACE)
    def clear(self):
        with open(self.m_gpio_port_path_value, "w") as fi:
            fi.write("0")

    # get pin state
    @dbus.service.method(DBUS_PIN_INTERFACE, out_signature="s")
    def get(self):
        with open(self.m_gpio_port_path_value, "r") as fi:
            return fi.read(1)

    # toggle pin state
    @dbus.service.method(DBUS_PIN_INTERFACE)
    def toggle(self):
        if self.get() == "0":
            self.set()
        else:
            self.clear()


class GPIOService(dbus.service.Object):
    def __init__(self, bus_name, pin_services):
        self.m_pin_services = pin_services       
        self.bus_name = bus_name 
        dbus.service.Object.__init__(self, bus_name, DBUS_PATH)
    
    ## org.freedesktop.DBus.ObjectManager
    # standard interface t oenumerate child services
    @dbus.service.method(OBJECT_MANAGER_INTERFACE, out_signature = "a{oa{sa{sv}}}")
    def GetManagedObjects(self):
        return {pin.m_service_path : {DBUS_PIN_INTERFACE: dict()} for key, pin in self.m_pin_services.items()}


    # send when pin state changed
    @dbus.service.signal(OBJECT_MANAGER_INTERFACE, signature = "oa{sa{sv}}")
    def InterfacesAdded(self, object_path, interfaces_and_properties):
        pass

    @dbus.service.signal(OBJECT_MANAGER_INTERFACE, signature = "oa{sa{sv}}")
    def InterfacesRemoved(self, object_path, interfaces_and_properties):
        pass

    # return list of GPIO pins
    @dbus.service.method(DBUS_SERVICE_INTERFACE, out_signature = "as")
    def list(self):
        return list(self.m_pin_services.keys())


    ## org.freedesktop.DBus.Properties implementation
    @dbus.service.signal(dbus.PROPERTIES_IFACE, signature = "sa{sv}as")
    def PropertiesChanged(self, interface, values, unchanged):
        pass

    @dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='ss', out_signature='v')
    def Get(self, interface, prop):
        if interface == DBUS_SERVICE_INTERFACE:
            try:
                pin = self.m_pin_services[prop]
                return pin.get()
            except KeyError:
                raise Exception('Unknown property: %s' % prop)    
        else:
            raise Exception('Unsupported interface: %s' % interface)

    @dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='ssv')
    def Set(self, interface, prop, value):
        if interface == DBUS_SERVICE_INTERFACE:
            try:
                pin = self.m_pin_services[prop]
                pin.set_value(value)
            except KeyError:
                raise Exception('Unknown property: %s' % prop)    
        else:
            raise Exception('Unsupported interface: %s' % interface)

    @dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='s', out_signature='a{sv}')
    def GetAll(self, interface):
        if interface == DBUS_SERVICE_INTERFACE:
            try:
                return {key: pin.get() for key, pin in self.m_pin_services.items()}
            except KeyError:
                raise Exception('Unknown property: %s' % prop)    
        else:
            raise Exception('Unsupported interface: %s' % interface)        

    def pin_changed_handler(self, pin, value):
        # print ("PIN CHANGED HANDLER: %s=%s" % (pin, value))
        self.PropertiesChanged(DBUS_SERVICE_INTERFACE, {pin: value}, [pin])


    # DBUS_SERVICE_INTERFACE
    # add pin
    @dbus.service.method(DBUS_SERVICE_INTERFACE, in_signature = "ss")
    def add(self, pin, port):
        for servicepin, service in self.m_pin_services.items():
            if service.m_port == port:
                raise FileExistsError("Port: {} already used by {}".format(
                    port, service.m_pin))
            if servicepin == pin:
                raise FileExistsError("Pin: {} already exists.".format(pin))
        self.m_pin_services[pin] = GPIOPin(self.bus_name, pin, str(port))
        self.InterfacesAdded(self.m_pin_services[pin].m_service_path, {DBUS_PIN_INTERFACE: dict()})
        self.m_pin_services[pin].onPinChange += self.pin_changed_handler
        print("Create pin: {} for port: {}".format(pin, port))

    # rm pin
    @dbus.service.method(DBUS_SERVICE_INTERFACE)
    def remove(self, pin, in_signature = "s"):
        print("Remove pin: {} for port: {}".format(pin,
                                                   self.m_pin_services[pin].m_port))
        try:
            self.m_pin_services[pin].deinit()            
        except IOError:
            # if pin was not init
            pass
        self.m_pin_services[pin].remove_from_connection()
        self.InterfacesRemoved(self.m_pin_services[pin].m_service_path, {DBUS_PIN_INTERFACE: dict()})
        del self.m_pin_services[pin]

    # load profile
    @dbus.service.method(DBUS_SERVICE_INTERFACE, in_signature = "a{ss}")
    def add_profile(self, pins):
        for pin, port in pins.items():
            self.add(pin, port)

    def init_from_file(self, yamlpath):
        print("Loading profile {}".format(yamlpath))
        with open(yamlpath) as yf:
            try:
                pin_map = yaml.load(yf)
                if not pin_map:
                    raise yaml.scanner.ScannerError("Empty file")
            except yaml.scanner.ScannerError:
                raise SyntaxError("File does not contain yaml profile.")        
        self.add_profile(pin_map)
    
    # clear all
    @dbus.service.method(DBUS_SERVICE_INTERFACE)
    def clear(self):
        while self.m_pin_services:
            self.rm(list(self.m_pin_services.keys())[0])


def main():
    # get device and it pin map
    # probably this is not the best place to check hardware model

    # init d-bus
    DBusGMainLoop(set_as_default=True)
    GObject.threads_init()    

    bus_name = dbus.service.BusName("com.devicehive.gpio", dbus.SystemBus())

    # create services
    pin_services = dict()
    gpio_service = GPIOService(bus_name, pin_services)
    
    profileLoaded = False
    try:
        if len(sys.argv) == 1:
            patharg = os.path.join(os.path.dirname(os.path.realpath(__file__)), "profiles")
        else:
            patharg = sys.argv[1]


        if os.path.isfile(patharg):
            # loading pin profile from file
            gpio_service.init_from_file(patharg)
        elif os.path.isdir(patharg):
            # loading ping profile from directory with profiles

            try:
                with open("/sys/firmware/devicetree/base/model", 'r') as hwid:
                    model = str(hwid.read()).rstrip("\0")
                    yamlpath = os.path.join(patharg, "{}.yaml".format(model))

                    try:
                        gpio_service.init_from_file(yamlpath)
                    except FileExistsError:
                        raise
                    except IOError:
                        raise FileNotFoundError("Profile file for {} not found.".format(model))                

            except IOError:
                raise SystemError("Board not found.")
            
        else:
            print("Profile does not exist.")
            return 1

        profileLoaded = True
    except IOError:
        print("Cannot read profile file.")
    except SyntaxError:
        print("Error while parsing profile {}".format(sys.argv[1]))
    except SystemError:
        print("Cannot detect board.")
    except FileNotFoundError:
        print("Profile for current board does not exist.")
    if profileLoaded == False:
        if len(sys.argv) > 1:
            return 1
        print("Starting without profile.")

    # start mainloop
    loop = GObject.MainLoop()
    try:
        loop.run()
    except (KeyboardInterrupt, SystemExit):
        loop.quit()


if __name__ == "__main__":
    main()
